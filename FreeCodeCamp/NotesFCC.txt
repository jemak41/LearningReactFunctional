DOM - a tree where the HTML element is the most root part of the tree
Template Strings - embedding javascript strings and expressions together inside a `` (back tick)
	`string text`

	`string text line 1
 	string text line 2`

	`string text ${expression} string text`
	
	regular JS, JSX:
	const App = () => <h1 style={styles}> Number {x} + {y} is equal to {x + y} </h1>	
	
	template strings:
	const App = () => <h1 style={styles}>{`Number ${x} + ${y} is equal to ${x + y}`}</h1>	

JSX - JSX is a preprocessor step that adds XML syntax to JavaScript. Just like XML, JSX tags have a tag name, attributes, and children. Looks like HTML
	- JSX properties are expected to be javascript object
		
		const App = () => <h1 style={color: "#FF8C00"}> Number {x} + {y} is equal to {x + y} </h1>
		
		for style properties should be in camelcase background-color > backgroundColor
			- defaut will be in pixels
	
	- JSX should be entered after the return statement 
		
		const J = () => //insert JSX here 
		function J (){return(//Insert JSX here
			)}
Functional Component - accepts prop as an argument. Example on passing an argument to a functional component:
	const ContactCard = (props) => 
    		<div className="contact-card">
        		<h2>{props.firstname}</h2>
        		<h3>{props.lastname}</h3>       
    		</div>

	const App = () =>
		<div>
			<ContactCard firstname="First" lastname="Last" /> //First and Last were passed as props.firstname and lastname
		</div>
Conditional on props:
	<h1 style={{display: props.question ? "block" : "none"}}> //if props.question exist then block if not then none
	<h1 style={{display: !props.question && "none"}}> //if left is true then return right
Inserting a variable in an arrow function:
	const App = () => {
		const jokeComponents = jokesData.map(joke => <Joke key={joke.id} question={joke.question} joke={joke.joke}/>)//key us required for parent-child rel.
		return(
			<div>
				{jokeComponents}
			</div>
		)
	}
Inserting Javascript inside a JSX:
	<input type="checkbox" checked={props.completed}></input>
State - a data that component maintains. value can change. adding a state in component needs constructor.
Constructor - a place where you initialize some value. first thing need to do w constructor is make a call to super()
Super - goes to parent class in the example case its Component:
	class App extends Component{
		constructor(){
			super() //used to access members of Component class
			this.state = {} //adds state in the App component
		}
	}
	
	Another Example:
	class App extends Component {
    		constructor(){
        		super()
        		this.state = {name: "Asshole", age: 5}
    		}
    		render(){
        		return (
            			<div>
                			<h1>{this.state.name}</h1>
                			<h3>{this.state.age} years old</h3>
            			</div>
        		)
    			}    
		}
Events - changes state. e.g. onClick, onChange, mouseOver etc. this can be render in JSX
	<input type="checkbox" onClick={() => console.log("Clicked")} />
When creating a class/component you can insert as many method as you like:
	class App extends Component{
	constructor()
	}
	method1(){
	}
	method2(){
	}
	render(){
		this.method1 //need to reference the this to use component methods
	}
	}
setState - any time you want to change the state you use this method.
	- came from Component class
binding method:
	class App extends React.Component {
    		constructor() {
        		super()
        		this.state = {}
        this.handleClick = this.handleClick.bind(this) //this is where the binding happens. binding is needed when using setState method
    	}
    
    	handleClick() {
		this.setState(prevState => { //setting the state using the previous state value
			return{
				count: prevState + 1
			}
		})
        }
prevState - the value/data of the previous state. another example of prevState:
	handleChange(id){
		this.setState(prevState => {
		    const updatedTodos = prevState.todos.map(todo => {
			if (todo.id===id){
			    todo.completed = !todo.completed
			}
			return todo
		    })
		    return{
			todos : updatedTodos
		    }
		})
	    }
componentDidMount - will be run when a component ran the first time and show up in the screen.
Conditional rendering - the App component where you should add your condition
	- if the thing on the left is true then it return the thing on the right. if the thing on the left is false then it is automatically false
		true && false

