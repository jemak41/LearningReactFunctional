// - comment 1 line
/* */ - comment multiple lines
Component - a class that is extended when creating new class
namespace - similar to class. groups items together 
	//declare namespace React {
	}
for loop:
	for (var x in list){
		do this
	}
<View> - <div>
<Text> - <p>
props - short for properties. these are the properties that was passed by the parent class. unchangeable in the child component
	//this.props.name = Greeting.props.name
	//this is other term for the class 
state - same w props but can changeable
expo init - creates a directory for a project
        //expo init projectname
setState() - enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state
if else - 
	if (1) {
	return 1
	}
	return null
setInterval(alertFunc, 3000) - will perform the alertFunc function every 3 secs (3000 ms.)
styles - 
	import { AppRegistry, StyleSheet, Text, View } from 'react-native';

	const styles = StyleSheet.create({
  		bigblue: {
    			color: 'blue'
			}
		});
	
	<Text style={[styles.bigblue, styles.red]}>bigblue, then red</Text>
=> - this is called an arrow function. this is similar to creating functions: var funcname = (parameter) => parameter + 5 //no return and function keywords needed
	function funcname(params) {
		return params + 2;
	}
	
	is the same with:
	
	var funcname = (params) => params + 2
map() - creates a new list and will apply the function on every element on the called list
	lis = ['a', 'b', 'c']
	lis.map(a = a + '1')
	['a1', 'b1', 'c1']
<TextInput> - Accepts text input
	<TextInput
		onChangeText={(text) => this.setState({text})}
	/>
Displaying Basic Button:
	import {Alert, Button} from 'react-native'
	
	export default class BasicButton extends Component {
		onPress(){
			Alert.alert('You tapped a button')
		}
		
		render(){
			return(
				<View style.{styles.buttonContainer}>
					<Button
						onPress={this.onPress}
						title='Press Me'
					/>
				</View>
			);
		}
	}
<TouchableHighlight onPress={this._onPressButton} underlayColor="white">
          <View style={styles.button}>
            <Text style={styles.buttonText}>TouchableHighlight</Text>
          </View>
<ScrollView>
          <Text style={{fontSize:96}}>Scroll me plz</Text>
	</ScrollView>
FlatList - Unlike the more generic ScrollView, the FlatList only renders elements that are currently showing on the screen, not all the elements at once.
	<FlatList
          data={[
            {key: 'Devin'},
            {key: 'Jackson'},
			]}
          renderItem={({item}) => <Text style={styles.item}>{item.key}</Text>}
    />
<SectionList
          sections={[
            {title: 'D', data: ['Devin']},
            {title: 'J', data: ['Jackson', 'James', 'Jillian', 'Jimmy', 'Joel', 'John', 'Julie']},
          ]}
          renderItem={({item}) => <Text style={styles.item}>{item}</Text>}
          renderSectionHeader={({section}) => <Text style={styles.sectionHeader}>{section.title}</Text>}
          keyExtractor={(item, index) => index}
        />
let - Using let protects the value of the global variable:
	var topic = "JavaScript"
	if (topic) {
	let topic = "React" console.log('block', topic)
	}	
	console.log('global', topic) //Javascript
including a variable in a text:
	<p>copyright ${new Date().getYear()} | The HTML5 Blog</p>
	//<Text> for react native
setting of default parameters:
	function func(a="ass"){
	console.log(`${a}`)
	}
typeof - typeof a //string
	typeof func //function
get the variables from a dictionary. This is called Desctructuring:
	var sandwich = {
		bread: "dutch crunch",
        	meat: "tuna",
          	cheese: "swiss",
          	toppings: ["lettuce", "tomato", "mustard"]
	}
	var {bread, meat} = sandwich
	console.log(bread, meat) // dutch crunch tuna
Destructuring:
	var [,,thirdResort] = ["Kirkwood", "Squaw", "Alpine"] 
	console.log(thirdResort) // Alpine
Object Literal Enhancement/Resctructuring:
	var name = "Tallac" 
	var elevation = 9738
	var print = function() {
		console.log(`Mt. ${this.name} is ${this.elevation} feet tall`)
	}
	var funHike = {name,elevation,print}
	funHike.print() // Mt. Tallac is 9738 feet tall
Object - Similar to Dictionary in Python
Spread - ...:
	var lakes = ["Donner", "Marlette", "Fallen Leaf", "Cascade"]
	var [first, ...rest] = lakes
	console.log(rest.join(", ")) // "Marlette, Fallen Leaf, Cascade"
Classes:
	class Vacation {
	constructor(destination, length) { //Constructor is special function in the class declaration, which defines a function, that represents the class itsel.
	this.destination = destination 
	this.length = length
	}
	print() {
	console.log(`${this.destination} will take ${this.length} days.`)
	} }
Initializing a Class:
	const trip = new Vacation("Santiago, Chile", 7);
	console.log(trip.print()); // Chile will take 7 days.
Classes can also be extended. When a class is extended, the subclass inherits the properties and methods of the superclass. These properties and methods can be manipulated from here, but as a default, all will be inherited.
Simple Inheritance:
	class Expedition extends Vacation {
	constructor(destination, length, gear) { 
	super(destination, length) //super is from superclass (the one that was inherit)
	this.gear = gear
	}
	print() {
	super.print()
	console.log(`Bring your ${this.gear.join(" and your ")}`)
	} }
export can be used to export any JavaScript type that will be consumed in another module.
	export const print(message) => log(message, new Date()) 
	export const log(message, timestamp) => console.log(`${timestamp.toString()}: ${message}`}
Sometimes you may want to export only one variable from a module. In these cases you can use export default
	const freel = new Expedition("Mt. Freel", 2, ["water", "snack"])
	export default freel
Modules that use export default are imported into a single variable:
	import { print, log } from './text-helpers' 
	import freel from './mt-freel'
You can also import everything into a single variable using *:
	import * as fns from './text-helpers

